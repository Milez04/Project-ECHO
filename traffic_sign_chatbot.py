import sys
import google.generativeai as genai
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QLineEdit, QPushButton, QTextEdit, QLabel, QFileDialog, QStatusBar)
from PyQt5.QtGui import QPixmap, QFont, QIcon
from PyQt5.QtCore import Qt, QSize, QBuffer
from PIL import Image
import os
import base64
from io import BytesIO

# Gemini API anahtarƒ±nƒ± buraya yapƒ±≈ütƒ±r (g√ºvenlik i√ßin .env kullanmak daha iyi)
GEMINI_API_KEY = "AIzaSyBzLQ0gOSIZsK_p1L-ux1_IINemi6K6J1E"  # –°—é–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á
genai.configure(api_key=GEMINI_API_KEY)

# Gemini modelini ba≈ülat (Gemini 1.5 Flash kullanacaƒüƒ±z)
model = genai.GenerativeModel('gemini-1.5-flash')

class TrafficSignChatbot(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ üöó")
        self.setGeometry(100, 100, 800, 600)

        # Ana widget ve layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        self.main_layout.setSpacing(15)

        # Ba≈ülƒ±k ve logo alanƒ±
        self.header_layout = QHBoxLayout()
        
        # Logo
        self.logo_label = QLabel()
        logo_path = "logo.png"  # –õ–æ–≥–æ—Ç–∏–ø —É–∫–∞–∑–∞–Ω, –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
        logo_pixmap = QPixmap(logo_path) if os.path.exists(logo_path) else QPixmap(32, 32)
        if logo_pixmap.isNull():
            logo_pixmap.fill(Qt.black)  # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ—Ç, —á–µ—Ä–Ω—ã–π placeholder
        self.logo_label.setPixmap(logo_pixmap.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.header_layout.addWidget(self.logo_label)

        # Ba≈ülƒ±k
        self.title_label = QLabel("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")
        self.title_label.setFont(QFont("Inter", 20, QFont.Bold))
        self.title_label.setStyleSheet("color: #fff;")

        self.title_label.setAlignment(Qt.AlignCenter)
        self.header_layout.addWidget(self.title_label, stretch=1)

        self.main_layout.addLayout(self.header_layout)

        # Sohbet alanƒ±
        self.chat_area = QTextEdit()
        self.chat_area.setReadOnly(True)
        self.chat_area.setStyleSheet("""
            QTextEdit {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #252535, stop:1 #2A2A3E);
                color: #E5E7EB;
                border: 1px solid #37374A;
                border-radius: 12px;
                padding: 12px;
                font-size: 14px;
            }
        """)
        self.main_layout.addWidget(self.chat_area)

        # Giri≈ü alanƒ±, fotoƒüraf y√ºkleme butonu ve g√∂nder butonu
        self.input_layout = QHBoxLayout()
        self.input_layout.setSpacing(10)

        # Fotoƒüraf y√ºkleme butonu (sol tarafta, PNG ile)
        self.upload_button = QPushButton()
        upload_icon = QIcon("upload.png")  # PNG –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ
        self.upload_button.setIcon(upload_icon)
        self.upload_button.setIconSize(QSize(32, 32))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ PNG
        self.upload_button.setFixedSize(40, 40)
        self.upload_button.clicked.connect(self.upload_image)
        self.input_layout.addWidget(self.upload_button)

        # Metin giri≈ü alanƒ±
        self.text_input = QLineEdit()
        self.text_input.setPlaceholderText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –∑–Ω–∞–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏?)")
        self.text_input.returnPressed.connect(self.send_text_query)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
        self.input_layout.addWidget(self.text_input)

        # G√∂nder butonu (saƒü tarafta, PNG ile)
        self.send_button = QPushButton()
        send_icon = QIcon("send.png")  # PNG –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ
        self.send_button.setIcon(send_icon)
        self.send_button.setIconSize(QSize(32, 32))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ PNG
        self.send_button.setFixedSize(40, 40)
        self.send_button.clicked.connect(self.send_text_query)
        self.input_layout.addWidget(self.send_button)

        self.main_layout.addLayout(self.input_layout)

        # Durum √ßubuƒüu
        self.statusBar = QStatusBar()
        self.statusBar.setObjectName("statusLabel")
        self.setStatusBar(self.statusBar)
        self.statusBar.showMessage("–ì–æ—Ç–æ–≤–æ")

        # Stil ≈üemasƒ±
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #1A1A2E, stop:1 #16213E);
                font-family: 'Inter', sans-serif;
                color: #E5E7EB;
            }

            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #5B86E5, stop:0.5 #36D1DC, stop:1 #5B86E5);
                color: #FFFFFF;
                border-radius: 20px;
                padding: 14px 20px;
                font-size: 15px;
                font-weight: 600;
                border: 2px solid rgba(91, 134, 229, 0.5);
                text-align: center;
                box-shadow: 0 2px 6px rgba(0,0,0,0.15);
            }

            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #36D1DC, stop:0.5 #5B86E5, stop:1 #36D1DC);
                box-shadow: 0 6px 14px rgba(54, 209, 220, 0.3);
                border-color: #36D1DC;
            }

            QPushButton:pressed {
                background: #4A90E2;
                box-shadow: inset 0 3px 6px rgba(0,0,0,0.3);
            }

            QLineEdit {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #252535, stop:1 #2A2A3E);
                color: #E5E7EB;
                border: 1px solid #37374A;
                border-radius: 12px;
                padding: 12px;
                font-size: 14px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            QLineEdit:focus {
                border: 2px solid #5B86E5;
                background: #2A2A3E;
                box-shadow: 0 4px 8px rgba(91, 134, 229, 0.2);
            }

            QLabel#statusLabel {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #252535, stop:1 #2A2A3E);
                color: #D1D5DB;
                font-size: 14px;
                padding: 14px;
                border-radius: 12px;
                border: 1px solid #37374A;
                box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            }
        """)

        # Fotoƒüraf deƒüi≈ükeni
        self.current_image = None

        # ƒ∞lk mesaj (ho≈ü geldin mesajƒ±)
        self.add_message("–°–∏—Å—Ç–µ–º–∞", "–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", is_system=True )

    def add_message(self, sender, message, is_system=False, is_user=False, image_path=None):
        """Sohbet alanƒ±na bir mesaj veya fotoƒüraf ekler."""
        current_text = self.chat_area.toHtml()
        
        if image_path:
            # Fotoƒürafƒ± base64 formatƒ±na √ßevirerek HTML'de g√∂ster
            pixmap = QPixmap(image_path).scaled(200, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            buffer = QBuffer()
            buffer.open(QBuffer.WriteOnly)
            pixmap.save(buffer, "PNG")
            buffer.close()
            image_data = base64.b64encode(buffer.data()).decode('utf-8')
            image_html = f"""
            <div style='background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #5B86E5, stop:1 #36D1DC); 
                         color: #FFFFFF; border-radius: 10px; padding: 10px; margin: 5px 0; 
                         font-size: 14px; text-align: right; margin-left: 20%;'>
                <b>{sender}:</b><br>
                <img src='data:image/png;base64,{image_data}' alt='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ'/>
            </div>
            """
            self.chat_area.setHtml(current_text + image_html)
        elif is_system:
            message_html = f"""
            <div style='background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #37374A, stop:1 #4B4B5E); 
                         color: #E5E7EB; border-radius: 10px; padding: 10px; margin: 5px 0; 
                         font-size: 14px; text-align: center;'>
                <b>{sender}:</b> {message}
            </div>
            """
            self.chat_area.setHtml(current_text + message_html)
        elif is_user:
            message_html = f"""
            <div style='background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #5B86E5, stop:1 #36D1DC); 
                         color: #FFFFFF; border-radius: 10px; padding: 10px; margin: 5px 0; 
                         font-size: 14px; text-align: right; margin-left: 20%;'>
                <b>{sender}:</b> {message}
            </div>
            """
            self.chat_area.setHtml(current_text + message_html)
        else:
            message_html = f"""
            <div style='background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #37374A, stop:1 #4B4B5E); 
                         color: #E5E7EB; border-radius: 10px; padding: 10px; margin: 5px 0; 
                         font-size: 14px; text-align: left; margin-right: 20%;'>
                <b>{sender}:</b> {message}
            </div>
            """
            self.chat_area.setHtml(current_text + message_html)
        
        self.chat_area.verticalScrollBar().setValue(self.chat_area.verticalScrollBar().maximum())

    def send_text_query(self):
        query = self.text_input.text().strip()
        if not query:
            self.statusBar.showMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
            return

        # Kullanƒ±cƒ± mesajƒ±nƒ± ekle
        self.add_message("–í—ã", query, is_user=True)
        self.text_input.clear()

        self.statusBar.showMessage("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
        try:
            response = model.generate_content(query)
            self.add_message("Gemini", response.text)
            self.statusBar.showMessage("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        except Exception as e:
            self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", is_system=True)
            self.statusBar.showMessage(f"–û—à–∏–±–∫–∞: {e}")

    def upload_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∑–Ω–∞–∫–∞", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.jpg *.jpeg *.png)"
        )
        if file_path:
            self.current_image = Image.open(file_path)
            self.add_message("–í—ã", "", is_user=True, image_path=file_path)
            self.statusBar.showMessage("–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

            # Otomatik olarak analiz et
            self.analyze_image()
        else:
            self.statusBar.showMessage("–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    def analyze_image(self):
        if self.current_image is None:
            self.statusBar.showMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ!")
            return

        self.statusBar.showMessage("–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞...")
        try:
            prompt = "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –∑–Ω–∞–∫? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ä—è—Å–Ω–∏—Ç–µ."
            response = model.generate_content([prompt, self.current_image])
            self.add_message("Gemini", response.text)
            self.statusBar.showMessage("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", is_system=True)
            self.statusBar.showMessage(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = TrafficSignChatbot()
    window.show()
    sys.exit(app.exec_())